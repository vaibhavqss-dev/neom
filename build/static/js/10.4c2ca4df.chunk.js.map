{"version":3,"file":"static/js/10.4c2ca4df.chunk.js","mappings":"qMA8BA,MAmQA,EAnQ8BA,KAC5B,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,IAAgBC,EAAAA,EAAAA,MAGjBC,EAAUF,EAAaG,IAAI,YAAc,MACzCC,EAAYJ,EAAaG,IAAI,cAAgB,gBAC7CE,EAAWL,EAAaG,IAAI,aAAe,eAC3CG,EAAYN,EAAaG,IAAI,cAAgB,YAE5CI,EAAeC,GAAoBC,EAAAA,SAAe,CACvDP,QAASA,EACTQ,KAAMN,EACNO,SAAUL,EACVM,MAAO,IACPP,SAAUA,KAGLQ,EAAYC,GAAiBL,EAAAA,SAAe,CACjDM,YAAa,GACbC,iBAAkB,GAClBC,cAAe,YAGVC,EAAOC,GAAYV,EAAAA,WAGpBW,EAAcC,IAClB,IAEE,MAAOC,EAAOC,GAAWF,EAAKG,MAAM,KAC9BC,EAAOC,SAASJ,GAChBK,EAAOF,GAAQ,GAAK,KAAO,KAEjC,MAAM,GAANG,OADsBH,EAAO,IAAM,GACZ,KAAAG,OAAIL,EAAO,KAAAK,OAAID,EACxC,CAAE,MAAOE,GAEP,OADAC,QAAQC,MAAM,yBAA0BF,GACjCR,CACT,GAIIW,EAAqBA,CAACC,EAAmBC,IACzCA,EACI,GAANN,OAAUR,EAAWa,GAAU,OAAAL,OAAMR,EAAWc,IAE3Cd,EAAWa,GAGdE,EAAwBA,KAC5B,IAAKjB,IAAUA,EAAMG,KAAM,MAAO,GAElC,GAAIH,EAAMG,KAAKe,OAAS,EAAG,CACzB,MAAMC,EAAQ,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAMG,KAAKe,OAAS,EAAGE,IACzCD,EAAME,KAAKP,EAAmBd,EAAMG,KAAKiB,GAAIpB,EAAMG,KAAKiB,EAAI,KAE9D,OAAOD,EAAMD,OAASC,EAAQ,CAACL,EAAmBd,EAAMG,KAAK,IAC/D,CACA,OAAOH,EAAMG,KAAKmB,KAAKC,GAAMT,EAAmBS,IAAG,EA6HrD,OAJAC,EAAAA,EAAAA,YAAU,MA7CVC,iBACE,IACE,MAAMC,QAAaC,EAAAA,EAAAA,IAAS,oBAADjB,OACL1B,IAItB4B,QAAQgB,IAAI,cAAeF,GACvBA,EAAKG,QACP5B,EAASyB,EAAK1B,OAEdY,QAAQC,MAAM,kCAAmCa,EAErD,CAAE,MAAOI,GACPlB,QAAQC,MAAM,wBAAyBiB,EACzC,CACF,CA8BEC,EAAU,GACT,KAGDC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,UACvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,0BACuB7C,EAAcG,KAAK,KAGvC,4DAIN2C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UAAQC,MAAOzC,EAAWE,YAAawC,SA9G1B1B,IACvBf,GAAa0C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACV3C,GAAU,IACbE,YAAac,EAAE4B,OAAOH,QACtB,EA0GyEF,SAAA,CAC9DlC,GACCA,EAAMwC,MACNxC,EAAMwC,KAAKlB,KAAKkB,IACdR,EAAAA,EAAAA,KAAA,UAAAE,SAAoBM,GAAPA,OAEdxC,IAAUA,EAAMwC,MAA8B,IAAtBxC,EAAMwC,KAAKtB,UACpCc,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,8BAKdC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAOzC,EAAWG,iBAClBuC,SAvHgB1B,IAC5Bf,GAAa0C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACV3C,GAAU,IACbG,iBAAkBa,EAAE4B,OAAOH,QAC3B,EAmHyCF,SAAA,CAE9BjB,IAAwBK,KAAI,CAACmB,EAAMC,KAClCV,EAAAA,EAAAA,KAAA,UAAAE,SAAqBO,GAARC,KAEqB,IAAnCzB,IAAwBC,SACvBc,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sCAMhBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAA,UACEI,MAAOzC,EAAWI,cAClBsC,SAhIe1B,IACzBf,GAAa0C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACV3C,GAAU,IACbI,cAAeY,EAAE4B,OAAOH,QACxB,EA4HoCF,SA1KPS,MAC/B,IAAK3C,IAAUA,EAAM4C,gBAAiB,MAAO,CAAC,UAE9C,MAAMC,EAAU,GACVC,EAAaC,KAAKC,IAAI,EAAGhD,EAAM4C,iBAErC,IAAK,IAAIxB,EAAI,EAAGA,GAAK0B,EAAY1B,IAC/ByB,EAAQxB,KAAK,GAADX,OAAIU,EAAC,SAAAV,OAAQU,EAAI,EAAI,IAAM,KAGzC,OAAOyB,CAAO,EAkKHF,GAA2BrB,KAAI,CAAC2B,EAAQP,KACvCV,EAAAA,EAAAA,KAAA,UAAAE,SAAqBe,GAARP,WAKnBP,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,CACS,IAAnCjB,IAAwBC,SACvBc,EAAAA,EAAAA,KAAA,UAAQC,UAAU,iBAAiBiB,QAnIzBC,KACpB,IACG9D,EAAcL,UACdW,EAAWE,cACXF,EAAWG,mBACXH,EAAWI,cAEZ,OAEF,MAAMqD,EAAazD,EAAWI,cAAcO,MAAM,KAAK,IA7CzD,SACEnB,EACAH,EACAS,EACAC,GAEAJ,GAAkB+D,IAAIf,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBe,GAAI,IACPlE,SAAUA,EACVH,QAASA,EACTS,SAAUA,EACVC,MAAOA,KAEX,CAiCE4D,CACE3D,EAAWE,YACXR,EAAcL,QACdW,EAAWG,iBACXsD,GA4BJ3B,iBACE,IAEE,MAAM8B,EAAclE,EAAcK,MAAMY,MAAM,KAAK,GAE7CoB,QAAa8B,EAAAA,EAAAA,IAAW,yBAE5B,CACIC,SAAUpE,EAAcL,QACxBwD,KAAMnD,EAAcF,SACpBgB,KAAMd,EAAcI,SACpBiE,YAAaH,IAGnB,OAAI7B,EAAKG,SACPjB,QAAQgB,IAAI,+BACL,IAEPhB,QAAQC,MAAM,kCAAmCa,IAC1C,EAEX,CAAE,MAAOI,GAEP,OADAlB,QAAQC,MAAM,wBAAyBiB,IAChC,CACT,CACF,CAlDO6B,IACHC,MAAM,oBAER,EA+GoE1B,SAAC,sBAI7DF,EAAAA,EAAAA,KAAA,UACEkB,QAASA,IAAMtE,EAAS,mBAAoB,CAAEiF,SAAS,IACvD5B,UAAU,gBAAeC,SAC1B,oBAMH,C","sources":["components/rescheduledEvents/reschedulePopUp/reschedulePopup.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { get_data, patch_data } from \"../../../api/api\";\n\n// Define the Event interface to match the API response\ninterface EventReview {\n  comment: string;\n  user_id: number;\n  avg_rating: number;\n  createdAt: string;\n  id: number;\n  User: {\n    name: string;\n    email: string;\n    profile_img: string;\n  };\n}\n\ninterface Event {\n  event_id: number;\n  title: string;\n  description: string;\n  subtext: string;\n  date: string[];\n  time: string[];\n  location: string;\n  available_seats: number;\n  image_urls: string[];\n}\n\nconst RescheduledEventPopUp = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  // Get event details from URL params\n  const eventId = searchParams.get(\"eventId\") || \"123\";\n  const eventName = searchParams.get(\"eventName\") || \"Round of Golf\";\n  const eventDay = searchParams.get(\"eventDay\") || \"Jan 01, 2023\";\n  const eventTime = searchParams.get(\"eventTime\") || \"12:00 AM\";\n\n  const [ScheduleEvent, setScheduleEvent] = React.useState({\n    eventId: eventId,\n    name: eventName,\n    timeSlot: eventTime,\n    seats: \"1\",\n    eventDay: eventDay,\n  });\n\n  const [formValues, setFormValues] = React.useState({\n    selectedDay: \"\",\n    selectedTimeSlot: \"\",\n    selectedSeats: \"1 seat\",\n  });\n\n  const [event, setEvent] = React.useState<Event | undefined>();\n\n  // Format time for display (convert 24-hour to 12-hour format)\n  const formatTime = (time: string): string => {\n    try {\n      // Assuming time is in HH:MM:SS format\n      const [hours, minutes] = time.split(\":\");\n      const hour = parseInt(hours);\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n      const formattedHour = hour % 12 || 12;\n      return `${formattedHour}:${minutes} ${ampm}`;\n    } catch (e) {\n      console.error(\"Error formatting time:\", e);\n      return time;\n    }\n  };\n\n  // Generate time slot display from start and end times\n  const getTimeSlotDisplay = (startTime: string, endTime?: string): string => {\n    if (endTime) {\n      return `${formatTime(startTime)} - ${formatTime(endTime)}`;\n    }\n    return formatTime(startTime);\n  };\n\n  const getAvailableTimeSlots = (): string[] => {\n    if (!event || !event.time) return [];\n\n    if (event.time.length > 1) {\n      const slots = [];\n      for (let i = 0; i < event.time.length - 1; i++) {\n        slots.push(getTimeSlotDisplay(event.time[i], event.time[i + 1]));\n      }\n      return slots.length ? slots : [getTimeSlotDisplay(event.time[0])];\n    }\n    return event.time.map((t) => getTimeSlotDisplay(t));\n  };\n\n  const getAvailableSeatsOptions = (): string[] => {\n    if (!event || !event.available_seats) return [\"1 seat\"];\n\n    const options = [];\n    const maxOptions = Math.min(5, event.available_seats);\n\n    for (let i = 1; i <= maxOptions; i++) {\n      options.push(`${i} seat${i > 1 ? \"s\" : \"\"}`);\n    }\n\n    return options;\n  };\n\n  function onChangeEventDay(\n    eventDay: string,\n    eventId: string,\n    timeSlot: string,\n    seats: string\n  ) {\n    setScheduleEvent((prev) => ({\n      ...prev,\n      eventDay: eventDay,\n      eventId: eventId,\n      timeSlot: timeSlot,\n      seats: seats,\n    }));\n  }\n\n  const handleDayChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormValues({\n      ...formValues,\n      selectedDay: e.target.value,\n    });\n  };\n\n  const handleTimeSlotChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormValues({\n      ...formValues,\n      selectedTimeSlot: e.target.value,\n    });\n  };\n\n  const handleSeatsChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormValues({\n      ...formValues,\n      selectedSeats: e.target.value,\n    });\n  };\n\n  const handleReserve = () => {\n    if (\n      !ScheduleEvent.eventId &&\n      !formValues.selectedDay &&\n      !formValues.selectedTimeSlot &&\n      !formValues.selectedSeats\n    ) {\n      return;\n    }\n    const seatsValue = formValues.selectedSeats.split(\" \")[0];\n    onChangeEventDay(\n      formValues.selectedDay,\n      ScheduleEvent.eventId,\n      formValues.selectedTimeSlot,\n      seatsValue\n    );\n\n    if (!UpdateEvent()) {\n      alert(\"Event Not Updated\");\n      return;\n    }\n\n  };\n\n  async function getEvent() {\n    try {\n      const data = await get_data(\n        `/events?event_id=${eventId}`,\n\n      );\n\n      console.log(\"Event data:\", data);\n      if (data.success) {\n        setEvent(data.event);\n      } else {\n        console.error(\"API response was not successful\", data);\n      }\n    } catch (err) {\n      console.error(\"Error fetching event:\", err);\n    }\n  }\n\n  async function UpdateEvent() {\n    try {\n      // Extract number from seats string (e.g., \"2 seats\" -> \"2\")\n      const seatsNumber = ScheduleEvent.seats.split(\" \")[0];\n\n      const data = await patch_data(\n        `/user/event/reschedule`,\n        {\n            event_id: ScheduleEvent.eventId,\n            date: ScheduleEvent.eventDay,\n            time: ScheduleEvent.timeSlot,\n            no_of_guest: seatsNumber,\n        }\n      );\n      if (data.success) {\n        console.log(\"Event updated successfully\");\n        return true;\n      } else {\n        console.error(\"API response was not successful\", data);\n        return false;\n      }\n    } catch (err) {\n      console.error(\"Error updating event:\", err);\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    getEvent();\n  }, []);\n\n  return (\n    <div className=\"reschedule-popup-overlay\">\n      <div className=\"event-container\">\n        <div className=\"event-card\">\n          <h2>Hey Vaibhav,</h2>\n          <p>\n            You have chosen a new \"{ScheduleEvent.name}\".\n            {/* event on{\" \"}\n            {ScheduleEvent.eventDay}, at {ScheduleEvent.timeSlot}. \n             */}\n            Have a great day ahead and enjoy your new experience!\n          </p>\n\n          <div className=\"form-group_1\">\n            <div className=\"form-group\">\n              <label>Select a day</label>\n              <select value={formValues.selectedDay} onChange={handleDayChange}>\n                {event &&\n                  event.date &&\n                  event.date.map((date: string) => (\n                    <option key={date}>{date}</option>\n                  ))}\n                {(!event || !event.date || event.date.length === 0) && (\n                  <option>No dates available</option>\n                )}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Select a time slot</label>\n              <select\n                value={formValues.selectedTimeSlot}\n                onChange={handleTimeSlotChange}\n              >\n                {getAvailableTimeSlots().map((slot, index) => (\n                  <option key={index}>{slot}</option>\n                ))}\n                {getAvailableTimeSlots().length === 0 && (\n                  <option>No time slots available</option>\n                )}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Select your seats</label>\n            <select\n              value={formValues.selectedSeats}\n              onChange={handleSeatsChange}\n            >\n              {getAvailableSeatsOptions().map((option, index) => (\n                <option key={index}>{option}</option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"button-group\">\n            {getAvailableTimeSlots().length !== 0 && (\n              <button className=\"reserve-button\" onClick={handleReserve}>\n                Reserve my seats\n              </button>\n            )}\n            <button\n              onClick={() => navigate(\"/upcoming-events\", { replace: true })}\n              className=\"cancel-button\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RescheduledEventPopUp;\n"],"names":["RescheduledEventPopUp","navigate","useNavigate","searchParams","useSearchParams","eventId","get","eventName","eventDay","eventTime","ScheduleEvent","setScheduleEvent","React","name","timeSlot","seats","formValues","setFormValues","selectedDay","selectedTimeSlot","selectedSeats","event","setEvent","formatTime","time","hours","minutes","split","hour","parseInt","ampm","concat","e","console","error","getTimeSlotDisplay","startTime","endTime","getAvailableTimeSlots","length","slots","i","push","map","t","useEffect","async","data","get_data","log","success","err","getEvent","_jsx","className","children","_jsxs","value","onChange","_objectSpread","target","date","slot","index","getAvailableSeatsOptions","available_seats","options","maxOptions","Math","min","option","onClick","handleReserve","seatsValue","prev","onChangeEventDay","seatsNumber","patch_data","event_id","no_of_guest","UpdateEvent","alert","replace"],"sourceRoot":""}