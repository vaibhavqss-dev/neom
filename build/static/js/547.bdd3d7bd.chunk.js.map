{"version":3,"file":"static/js/547.bdd3d7bd.chunk.js","mappings":"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","sources":["components/base/card/card.tsx","components/base/recommendationCards/RecommendationCardContainer.tsx","components/rescheduledEvents/rescheduledEvent.tsx"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ntype CardProps = {\n  eventId: string;\n  index: number;\n  category: string;\n  date: string;\n  time: string;\n  name: string;\n  subtextName: string;\n  subtextDate: string;\n  timeRange: string;\n  location: string;\n  imgURL: string;\n  isLiked?: boolean;\n  handleLike?: (id: string, name: string) => void;\n  IsRank?: boolean;\n};\n\nconst Card: React.FC<CardProps> = ({\n  index,\n  eventId,\n  imgURL,\n  subtextDate,\n  subtextName,\n  name,\n  timeRange,\n  location,\n  category,\n  date,\n  time,\n  isLiked,\n  handleLike,\n  IsRank,\n}) => {\n  const onLikedHandle = () => {\n    if (eventId === undefined) return;\n    // console.log(\"Liked Event: \", eventId, name);\n    handleLike && handleLike(eventId, name);\n  };\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"recommendationCards\">\n      <div className=\"recommendationCards_card\" key={index}>\n        <div\n          onClick={() => navigate(`/event-details?eventId=${eventId}`)}\n          className=\"recommendationCards_card_img_container\"\n        >\n          <img\n            src={imgURL}\n            alt=\"Upcoming Events\"\n            className=\"recommendationCards_card_img\"\n          />\n        </div>\n        <div className=\"recommendationCards_card_text\">\n          <div className=\"recommendationCards_card_text_subtext\">\n            <p className=\"recommendationCards_card_text_subtext_name\">\n              {subtextName}\n            </p>\n            <p className=\"recommendationCards_card_text_subtext_date\">\n              {subtextDate.split(\":\")[0]}\n            </p>\n          </div>\n\n          <p className=\"recommendationCards_card_text_name\">{name}</p>\n\n          <p className=\"recommendationCards_card_text_time\">\n            {timeRange.split(\":\")[0]} AM {\"-\"} {parseInt(timeRange.split(\":\")[0][0])+3} AM\n          </p>\n        </div>\n        <div\n          onClick={() => onLikedHandle()}\n          className={\n            isLiked\n              ? \"recommendationCards_card_heart isLiked\"\n              : \"recommendationCards_card_heart\"\n          }\n        ></div>\n        {IsRank && <div className=\"recommendationCards_cardRank\">{index}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"../card/card\";\nimport yogoImg from \"./../../../assets/img/yoga.jpg\";\nimport SelectDistance from \"../selectdistance/selectdistance\";\nimport { Likeevent, Unlikeevent } from \"../../../api/utility_api\";\n\n// type RecommendationItem = {\n//   event_id: string;\n//   category: string;\n//   date: string;\n//   time: string;\n//   name: string;\n//   subtextName: string;\n//   subtextDate: string;\n//   timeRange: string;\n//   location: string;\n//   imgURL: string;\n//   isLiked: boolean;\n// };\n\ntype RecommendationCardContainerProps = {\n  number: number;\n  IsRank?: boolean;\n};\n\ntype RecommendationLiked = {\n  eventId: string;\n  name: string;\n};\n\nconst RecommendationCardContainer: React.FC<\n  RecommendationCardContainerProps\n> = ({ number, IsRank }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const [liked, setLiked] = useState<RecommendationLiked[]>([]);\n  function handleLike(eventId: string, name: string) {\n    setLiked((prev) => {\n      if (prev.map((ele) => ele.eventId).includes(eventId)) {\n        Unlikeevent(eventId);\n        return prev.filter((ele) => ele.eventId !== eventId);\n      } else {\n        Likeevent(eventId);\n        return [...prev, { eventId, name }];\n      }\n    });\n  }\n\n  const [recommendations, setRecommendations] = useState<any[]>([]);\n  useEffect(() => {\n    async function fetchItineraries() {\n      setLoading(true);\n      try {\n        const apiUrl = \"http://localhost:3001\";\n        const token = localStorage.getItem(\"token\");\n\n        if (!token) {\n          setError(\"Authentication required\");\n          return;\n        }\n\n        const response = await fetch(`${apiUrl}/api/user/recommendation`, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        const data = await response.json();\n\n        if (data.error) {\n          setError(data.error);\n          console.error(\"API error:\", data.error);\n          return;\n        }\n        setRecommendations(data.event);\n      } catch (err) {\n        console.error(\"Fetch error:\", err);\n        setError(\"Failed to fetch itineraries\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchItineraries();\n  }, []);\n\n  return (\n    <div>\n      {loading && <p>loading..</p>}\n      {error && <p>{}</p>}\n      <p className=\"recommandationSection_title\">\n        Today's recommendation for you, {localStorage.getItem(\"fullname\")}\n      </p>\n\n      {!error && !loading && recommendations.length != 0 ? (\n        <>\n          {/* <SelectDistance /> */}\n          <div className=\"recommendationCardContainer\">\n            {recommendations.map((ele: any, i: number) => (\n              <Card\n                IsRank={IsRank}\n                key={ele.event_id}\n                handleLike={handleLike}\n                isLiked={liked\n                  .map((item) => item.eventId)\n                  .includes(ele.event_id)}\n                eventId={ele.event_id}\n                index={i + 1}\n                imgURL={ele.event.image_urls[0]}\n                subtextDate={ele.event.date[0]}\n                subtextName={ele.event.subtext}\n                name={ele.event.title}\n                timeRange={ele.event.time[0]}\n                location={ele.location}\n                category={ele.category}\n                date={ele.date}\n                time={ele.time}\n              />\n            ))}\n          </div>\n        </>\n      ) : (\n        <p>No New recommendations found, Please come again after some time</p>\n      )}\n    </div>\n  );\n};\n\nexport default RecommendationCardContainer;\n","import React, { useEffect, useState } from \"react\";\nimport SelectDistance from \"../base/selectdistance/selectdistance\";\nimport RecommendationCardContainer from \"../base/recommendationCards/RecommendationCardContainer\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { get_data } from \"../../api/api\";\n\ninterface RescheduledEventProps {}\n\nconst EventDummyDate = {\n  name: \"Round of Golf\",\n  location: \"Sindalah Island\",\n  date: \"Jan 01, 2023\",\n  timeSlots: [\"7:00 AM\", \"11:00 AM\", \"3:00 PM\"],\n  timeLeft: \"1 hour 5 minutes\",\n  eventId: \"123\",\n};\n\nconst RescheduledEvent: React.FC<RescheduledEventProps> = ({}) => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const eventId = searchParams.get(\"eventId\");\n  const eventName = searchParams.get(\"eventName\");\n\n  const [suggestedEvent, setSuggestedEvent] = useState<any>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const [event, setEvent] = useState<any>(null);\n  useEffect(() => {\n    let isMounted = true;\n\n    async function fetchSuggestedEvent() {\n      try {\n        const data = await get_data(\n          `/event/suggest_event/2`,\n        );\n\n        if (isMounted) {\n          if (data.success) {\n            setSuggestedEvent(data.event);\n          } else {\n            console.error(\"API response was not successful\", data);\n            setError(\"Failed to load suggested event\");\n          }\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Error fetching suggested event:\", err);\n          setError(\"Error connecting to server\");\n        }\n      }\n    }\n\n    async function fetchEvent() {\n      try {\n        const data = await get_data(\n          `/events?event_id=${eventId}`,\n        );\n\n        console.log(\"data\", data);\n        if (isMounted) {\n          if (data.success) {\n            setEvent(data.event);\n          } else {\n            console.error(\"API response was not successful\", data);\n            setError(\"Failed to load event details\");\n          }\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Error fetching event:\", err);\n          setError(\"Error connecting to server\");\n        }\n      }\n    }\n\n    setLoading(true);\n\n    // Fetch both data in parallel\n    Promise.all([fetchEvent(), fetchSuggestedEvent()]).finally(() => {\n      if (isMounted) {\n        setLoading(false);\n      }\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"rescheduledEventPg\">Loading suggested events...</div>\n    );\n  }\n\n  if (error || !suggestedEvent) {\n    return (\n      <div className=\"rescheduledEventPg\">\n        <div className=\"rescheduledEventPg_headers\">\n          <h1>Hey {localStorage.getItem(\"fullname\")},</h1>\n          <p>\n            Sorry, we couldn't find any suggested events at this time. {error}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Add a check for event data\n  if (!event) {\n    return (\n      <div className=\"rescheduledEventPg\">\n        <div className=\"rescheduledEventPg_headers\">\n          <h1>Hey {localStorage.getItem(\"fullname\")},</h1>\n          <p>Sorry, we couldn't load the event details at this time.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"rescheduledEventPg\">\n      <>\n        <div className=\"rescheduledEventPg_headers\">\n          <h1>Hey {localStorage.getItem(\"fullname\")},</h1>\n          <p>\n            We have a few similar event for you against your today's rescheduled\n            event of {event.title}. And one of them is just starting in an{\" \"}\n            {suggestedEvent.time[0].split(\":\")[0]} hours{\" \"}\n            {suggestedEvent.time[0].split(\":\")[1]} minutes drive away.\n          </p>\n        </div>\n\n        <div className=\"rescheduledEventPg_imgContainer\">\n          <img src={event.image_urls[0]} alt=\"event\" />\n\n          <div className=\"rescheduledEventPg_imgContainer_overlay\">\n            <div className=\"rescheduledEventPg_imgContainer_overlay_text\">\n              <h1>{event.title}</h1>\n              <p>{event.location}</p>\n              <p className=\"rescheduledEventPg_imgContainer_overlay_text_timeSlots\">\n                <p>{event.date.map((date:any) => \" | \" + date)}</p>\n                {event.time.map((timeSlot: any, index: number) => (\n                  \n                  <div key={index}>\n                    <span>{timeSlot}</span>\n                    {/* {index < event.time.length - 1 && <span> | </span>} */}\n                  </div>\n                ))}\n              </p>\n            </div>\n\n            <button\n              className=\"rescheduledEventPg_imgContainer_overlay_btn\"\n              onClick={() => {\n                navigate(\n                  `/reschedule-popup?eventId=${\n                    event.event_id\n                  }&eventName=${encodeURIComponent(event.title)}&eventDay=${\n                    suggestedEvent.date[0]\n                  }&eventTime=${event.time[0]}`\n                );\n              }}\n            >\n              Reschedule\n            </button>\n          </div>\n        </div>\n\n        <div className=\"rescheduledEventPg_recommendation\">\n          <RecommendationCardContainer number={10} />\n        </div>\n      </>\n    </div>\n  );\n};\n\nexport default RescheduledEvent;\n"],"names":["_ref","index","eventId","imgURL","subtextDate","subtextName","name","timeRange","location","category","date","time","isLiked","handleLike","IsRank","navigate","useNavigate","_jsx","className","children","_jsxs","onClick","concat","src","alt","split","parseInt","undefined","number","loading","setLoading","useState","error","setError","liked","setLiked","prev","map","ele","includes","Unlikeevent","filter","Likeevent","recommendations","setRecommendations","useEffect","async","apiUrl","token","localStorage","getItem","response","fetch","headers","Authorization","data","json","console","event","err","fetchItineraries","length","_Fragment","i","Card","item","event_id","image_urls","subtext","title","searchParams","useSearchParams","get","suggestedEvent","setSuggestedEvent","setEvent","isMounted","Promise","all","get_data","log","success","fetchEvent","fetchSuggestedEvent","finally","timeSlot","encodeURIComponent","RecommendationCardContainer"],"sourceRoot":""}